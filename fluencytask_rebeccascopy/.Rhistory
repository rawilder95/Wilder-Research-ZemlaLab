# counts_table= counts_table1[, .N, by= .(id, category)]
# dat= merge(dat, counts_table)
# dat= dat[N==2]
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
library(data.table)
# install.packages("googlesheets4")
library(googlesheets4)
# Read in Data From RA Google Sheets
ra_sheet<- data.table(read_sheet('https://docs.google.com/spreadsheets/d/14YJ7IpvEyFVRSqr3zo3SAqgyR6g0QYAbI5xzxh3rl_A/edit?usp=sharing'))
dat[!is.nan(item)]
dat[is.nan(item)]
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
# library(data.table)
# install.packages("googlesheets4")
# library(googlesheets4)
# install.packages("ggplot2")
# library(ggplot2)
# install.packages("lme4")
# library(lme4)
rm(list= ls())
library(lme4)
library(cowplot)
library(ggplot2)
library(data.table)
#
dat <- data.table(read.csv("final_results.csv"))
dat<- subset(dat,select=-c(X))
nsubj= unique(dat$id)
ncat= unique(dat$category)
# get indices for categories that were !repeated twice
k= dat[, .N, by= .(category, game, id)]
cat_table= k[, .N, by= .(id, category)]
cat_table= cat_table[N==2]
dat= merge(dat, cat_table)
dat= dat[N== 2]
# Drop games 23-24
ncat= unique(dat$category)
for (i in 1:length(nsubj)){
for (j in 1:length(ncat)){
this_game <- dat[id== nsubj[i] & category== ncat[j], game]
dat[id== nsubj[i] & category== ncat[j], listnum:= max(game)]
}
}
dat[listnum== "FALSE", listrank:= 1]
dat[listnum == "TRUE", listrank:= 2]
dat[, both_trials := 0]
dat<- subset(dat, select=-c(listnum))
# get items that were listed in both trials
for (i in 1:length(nsubj)){
for (cats in ncat){
this_subj <- dat[id==nsubj[i] & category== cats,]
repeated_words <- intersect(this_subj[listrank==2,item], this_subj[listrank==1,item])
this_subj[, both_trials:= 0]
this_subj[item %in% repeated_words, both_trials:=1]
dat[id==nsubj[i] & category== cats]$both_trials <- this_subj$both_trials
}
}
dat[, temp_int:= 0]
dat[, temp_int:= ((max(game)-min(game))-1), by= .(id, category)]
#
# for (subject in nsubj){
#   for(cats in ncat){
#     this_subj= dat[id== subject & category== ncat & listrank== 2]
#     # Make sure this isn't an empty row for subject (as some trials were removed)
#     if(nrow(this_subj)>0){
#
#     }
#   }
# }
#
#
# l2 = dat[both_trials==1 & listrank==2]
# l1= dat[listrank==1]
# transitions1= dat[which(l1$item %in% l2$item)]
# sample_l2= l2[id== "S0lVm6wcxkb" & category== "Animals"]
# sample_l1= l1[id== "S0lVm6wcxkb" & category== "Animals"]
# s_vec= vector()
#
# for(i in 1:(nrow(sample_subj)-1)){
#   if(abs(sample_subj[i]$itemnum- sample_subj[i+1]$itemnum)==1){
#     s= abs(sample_l1[item %in% sample_l2[i]$item]$itemnum - sample_l1[item %in% sample_l2[i+1]$item]$itemnum)
#   }
# }
# for (subject in nsubj){
#   for (cats in ncat){
#     if (nrow(dat[id== subject & category== cats & both_trials== 1 & listrank== 2])>1 & nrow(dat[id== subject & category== cats & both_trials== 1 & listrank== 1]))>1){
#       l2= dat[id== subject & category== cats & both_trials== 1 & listrank== 2]
#       l1= dat[id== subject & category== cats & listrank== 1]
#       s_vec= list()
#       for(i in 1:(nrow(l2)-1)){
#         s_vec[i]= abs(l1[item %in% l2[i]$item]$itemnum- l1[item %in% l2[i+1]$item]$itemnum)
#       }
#     }
#   }
# }
lag_df= data.table()
lag0= vector()
s_df= data.table(id= character(), category= character(), item= character(), sp1= numeric(), dist= numeric(), range= numeric())
for (subject in nsubj){
for(cats in ncat){
idx= nrow(dat[id== subject & category== cats & both_trials== 1 & listrank==2])>1 & nrow(dat[id== subject & category== cats & both_trials== 1 & listrank==2])
if (idx== TRUE){
l2= dat[id== subject & category== cats & both_trials== 1 & listrank== 2]
l1= dat[id== subject & category== cats & listrank== 1]
s_vec= vector()
id_vec= vector()
cat_vec= vector()
item_vec= vector()
sp_vec2= vector()
sp_vec1= vector()
for(i in 1:(nrow(l2)-1)){
s_vec[i]= l1[item %in% l2[i+1]$item]$itemnum - l1[item %in% l2[i]$item]$itemnum
if()
# if(s_vec[i]==0){
#   newlag= s_vec[i]
# }
# lag_df= rbindlist(list(lag_df, newlag))
id_vec[i]= subject
cat_vec[i]= cats
item_vec[i]= l2[i]$item
sp_vec1[i]= min(l1[l1$item %in% l2[i]$item]$itemnum)
# sp_vec2[i]= l1[i]$itemnum
}
max_range= rep(max(abs(s_vec)),length(s_vec))
newrow= list(id_vec, cat_vec, item_vec, sp_vec1, s_vec, max_range)
s_df= rbindlist(list(s_df, newrow))
}
}
}
s_df[dist== 0]= NaN
### Sanity Check Calculations ###
#Forwards
s_df[dist>0, mean(dist), by= .(id, category)]
s_df[dist>0, mean(dist), by=  id]
s_df[dist>0, mean(dist), by= category]
#Backwards
s_df[dist<0, mean(dist), by= .(id, category)]
s_df[dist<0, mean(dist), by=  id]
s_df[dist<0, mean(dist), by= category]
#all about the same
#Get counts for how many forward v backward order transitions by subj
bckwd= s_df[dist<0, .N, by= .(id, category)]
fwd= s_df[dist>0, .N, by= .(id, category)]
mean(fwd$N) #3.905405
mean(bckwd$N) #5.665198
# this_transition= s_df[id== nsubj[1] & category== ncat[1]]
# transition_range= 1:(max(this_transition$dist))
# this_subj= dat[id== nsubj[1] & category== ncat[1]]
# transition_range= data.table(possible_transitions= c(min(this_transition$dist):max(this_transition$dist)), counts= 0)
# # This is where I am getting the transition counts
# for(i in 1:length(transition_range$possible_transitions)){
#   idx= transition_range$possible_transitions[i]
#   transition_range[i]$counts= sum(this_transition$dist %in% idx)
# }
#
#
# log_table= data.table(transition= numeric())
# this_log= vector()
# counter= vector()
# tvec= vector()
# for (i in 1:max(this_transition$sp1)){
#   if(nrow(this_transition[sp1==i])>0){
#     this_log[i]= this_transition[sp1== i]$sp1
#     fordir= c(1:i)
#     fordir[fordir%in% this_log]= NaN
#     backdir= c(i:1)
#     backdir[backdir%in% this_log]= NaN
#     backdir[backdir %in% fordir]= NaN
#     newrow= list(c(fordir, backdir))
#     log_table= rbindlist(list(log_table, newrow))
#     print(i)
#   } else{
#     print(this_transition$sp)
#   }
# }
# for(i in 1:max(this_transition$sp1)){
#   idx= this_transition[sp1== i]$sp1
#   this_log[i]= idx
#   fordir= c(1:idx)
#   fordir[!fordir %in% this_log]= NaN
#   backdir= c(idx:1)
#   backdir[backdir %in% this_log]= NaN
#   tvec[i]= sum(!is.nan(fordir))+ sum(!is.nan(backdir))
#   newrow= list(c(fordir, (backdir*-1)))
#   log_table= rbindlist(list(log_table, newrow))
# }
s_df
#
# k= s_df[id== nsubj[1] & category== ncat[1]]
# t_counts= vector()
# d= vector()
# a_counts= unique(s_df)
# for (i in 1:max(k$dist)){
#  d[i]= max(k$dist)- i+1
# }
#### Me mapping out exactly how to get the dist of possible transition values####
#
# this_transition= s_df[id== nsubj[1]& category== ncat[1]]
# thislog= vector()
# # possible transitions
# idx= this_transition[1]$sp1 #= 2
# # vector= [1, 3, 4, 5, 6, ..... to 25]
# k = c(1:idx, idx:(max(this_transition$sp1)))
# thislog[1]= idx
# k= k[!k%in% thislog]
# k
# length(k)
#
# idx= this_transition[2]$sp1 #= 2
# # vector= [1, 3, 4, 5, 6, ..... to 25]
# k = c(1:idx, idx:(max(this_transition$sp1)))
# thislog[2]= idx
# k= k[!k%in% thislog]
# k
# length(k)
#
# idx= this_transition[3]$sp1 #= 2
# # vector= [1, 3, 4, 5, 6, ..... to 25]
# k = c(1:idx, idx:(max(this_transition$sp1)))
# thislog[3]= idx
# k= k[!k%in% thislog]
# k
# length(k)
#
# idx= this_transition[4]$sp1 #= 2
# # vector= [1, 3, 4, 5, 6, ..... to 25]
# k = c(1:idx, idx:(max(this_transition$sp1)))
# thislog[4]= idx
# k= k[!k%in% thislog]
# k
# length(k)
#
# idx= this_transition[5]$sp1 #= 2
# # vector= [1, 3, 4, 5, 6, ..... to 25]
# k = c(1:idx, idx:(max(this_transition$sp1)))
# thislog[5]= idx
# k= k[!k%in% thislog]
# k
# length(k)
ggplot()+ geom_histogram(aes(x= s_df[!is.nan(dist)]$dist))
### Then trying to do it exactly in the vector###
# #New weird error is that ptr_count is now, for whatever reason, not adding rows.
# #Even though it was earlier.
# thislog= vector()
# ptr_count= data.table(sp= numeric(), npossible= numeric())
# getvals= vector()
# for (i in 1:max(this_transition$sp1)){
#   # print(i)
#   if(nrow(this_transition[sp1 %in% i])>0){
#     idx= i
#     k = c(1:idx, idx:(max(this_transition$sp1)))
#     thislog[i]= idx
#     k= k[!k%in% thislog]
#     k= k[!is.na(k)]
#     print(k)
#
#   }else {
#     k = 0
#     thislog[i]= idx
#   }
#   ptr_count[i]$npossible= length(k) #N possible transitions that could be made up till this point
# }
# ptr_count
#
# for (subject in nsubj){
#   for (cats in ncat){
#     if (nrow(dat[id== subject & category== cats & both_trials== 1 & listrank== 2])>1 & nrow(dat[id== subject & category== cats & both_trials== 1 & listrank== 1]))>1){
#       l2= dat[id== subject & category== cats & both_trials== 1 & listrank== 2]
#       l1= dat[id== subject & category== cats & listrank== 1]
#       s_vec= list()
#       for(i in 1:(nrow(l2)-1)){
#         s_vec[i]= abs(l1[item %in% l2[i]$item]$itemnum- l1[item %in% l2[i+1]$item]$itemnum)
#       }
#     }
#   }
# }
lag_df= data.table()
lag0= vector()
s_df= data.table(id= character(), category= character(), item= character(), sp1= numeric(), dist= numeric(), range= numeric())
for (subject in nsubj){
for(cats in ncat){
idx= nrow(dat[id== subject & category== cats & both_trials== 1 & listrank==2])>1 & nrow(dat[id== subject & category== cats & both_trials== 1 & listrank==2])
if (idx== TRUE){
l2= dat[id== subject & category== cats & both_trials== 1 & listrank== 2]
l1= dat[id== subject & category== cats & listrank== 1]
s_vec= vector()
id_vec= vector()
cat_vec= vector()
item_vec= vector()
sp_vec2= vector()
sp_vec1= vector()
for(i in 1:(nrow(l2)-1)){
s_vec[i]= l1[item %in% l2[i+1]$item]$itemnum - l1[item %in% l2[i]$item]$itemnum
# if(s_vec[i]==0){
#   newlag= s_vec[i]
# }
# lag_df= rbindlist(list(lag_df, newlag))
id_vec[i]= subject
cat_vec[i]= cats
item_vec[i]= l2[i]$item
sp_vec1[i]= min(l1[l1$item %in% l2[i]$item]$itemnum)
# sp_vec2[i]= l1[i]$itemnum
}
max_range= rep(max(abs(s_vec)),length(s_vec))
newrow= list(id_vec, cat_vec, item_vec, sp_vec1, s_vec, max_range)
s_df= rbindlist(list(s_df, newrow))
}
}
}
k= dat[, .N , by= .(id, category, game, item)]
k[N>1]
for (i in 1:length(unitems)){
dat[item %in% unitems[i]]$item= citems[i]
}
# fix categortype
for (i in 1:length(nsubj)){
for (j in 1:length(ncat)){
this_game <- dat[id== nsubj[i] & category== ncat[j], game]
dat[id== nsubj[i] & category== ncat[j], listnum:= this_game== max(this_game)]
}
}
dat$listnum= dat[, as.numeric(listnum)]
dat[,listrank:= NaN]
dat[listnum== 0]$listrank= 1
dat[listnum==1]$listrank= 2
dat= subset(dat, select= -c(listnum))
# This loop looks up and gets rid of perseverative erros by setting to NaN
check4err= data.table()
for (subject in nsubj){
for (cats in ncat){
this_subj <- dat[listrank== 1 & id== subject & category== cats]
if(any(this_subj[listrank== 1,.N, by= item]$N> 1)){
check4err <- this_subj[listrank== 1,.N, by= item]
get_err <- this_subj[item %in% check4err[check4err$N>1]$item]
smallest_val <- min(get_err$itemnum)
# larger_val <- get_err[itemnum != smallest_val]
this_subj[item %in% unique(get_err$item) & itemnum %in% smallest_val]$item = NaN
dat[id== subject & category == cats & listrank== 1] <- this_subj
}
}
}
dat= dat[!is.nan(item),]
k= dat[, .N , by= .(id, category, game, item)]
k[N>1]
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
library(data.table)
# install.packages("googlesheets4")
library(googlesheets4)
# Read in Data From RA Google Sheets
ra_sheet<- data.table(read_sheet('https://docs.google.com/spreadsheets/d/14YJ7IpvEyFVRSqr3zo3SAqgyR6g0QYAbI5xzxh3rl_A/edit?usp=sharing'))
# Sort Alphabetically
ra_sheet <- ra_sheet[order(-rank(Unchecked), Category)]
# Read in New Data
dat <- data.table(read.csv("results_cleaned.csv"))
nrow(dat)
# Parse by category and sort alphabetically
cat_names <- unique(dat[, category])
instruments_clean <- sort(unique(dat[category== cat_names[1],item]))
vegetables <- sort(unique(dat[category== cat_names[2],item]))
furniture <- sort(unique(dat[category== cat_names[3],item]))
clothing <- sort(unique(dat[category== cat_names[4],item]))
cities <- sort(unique(dat[category== cat_names[5],item]))
countries <- sort(unique(dat[category== cat_names[6],item]))
fruits <- sort(unique(dat[category== cat_names[7],item]))
animals <- sort(unique(dat[category== cat_names[8],item]))
transportation <- sort(unique(dat[category== cat_names[9],item]))
measurements <- sort(unique(dat[category== cat_names[10],item]))
sports <- sort(unique(dat[category== cat_names[11],item]))
kitchen <- sort(unique(dat[category== cat_names[12],item]))
spellcheck <- c(instruments_clean, vegetables, furniture, clothing, cities, countries, fruits, animals, transportation, measurements, sports, kitchen)
# write an arbitrary data table so that you can append in sorted data that was *not* in last batch
to_import <- data.table(spellcheck[!spellcheck %in% ra_sheet$Unchecked])
##Only uncomment this when you load in new data. This appends the unique new words to the google sheets##
# sheet_append(ss= 'https://docs.google.com/spreadsheets/d/14YJ7IpvEyFVRSqr3zo3SAqgyR6g0QYAbI5xzxh3rl_A/edit?usp=sharing', to_import)
## Pull data back to original dataframe ##
ra_sheet<- data.table(read_sheet('https://docs.google.com/spreadsheets/d/14YJ7IpvEyFVRSqr3zo3SAqgyR6g0QYAbI5xzxh3rl_A/edit?usp=sharing'))
dat <- data.table(read.csv("results_cleaned.csv"))
for (i in 1:length(unitems)){
dat[item %in% unitems[i]]$item= citems[i]
}
# fix categortype
for (i in 1:length(nsubj)){
for (j in 1:length(ncat)){
this_game <- dat[id== nsubj[i] & category== ncat[j], game]
dat[id== nsubj[i] & category== ncat[j], listnum:= this_game== max(this_game)]
}
}
dat$listnum= dat[, as.numeric(listnum)]
dat[,listrank:= NaN]
dat[listnum== 0]$listrank= 1
dat[listnum==1]$listrank= 2
dat= subset(dat, select= -c(listnum))
# This loop looks up and gets rid of perseverative erros by setting to NaN
check4err= data.table()
for (subject in nsubj){
for (cats in ncat){
this_subj <- dat[listrank== 1 & id== subject & category== cats]
if(any(this_subj[listrank== 1,.N, by= item]$N> 1)){
check4err <- this_subj[listrank== 1,.N, by= item]
get_err <- this_subj[item %in% check4err[check4err$N>1]$item]
smallest_val <- min(get_err$itemnum)
# larger_val <- get_err[itemnum != smallest_val]
this_subj[item %in% unique(get_err$item) & itemnum %in% smallest_val]$item = NaN
dat[id== subject & category == cats & listrank== 1] <- this_subj
}
}
}
dat= dat[!is.nan(item),]
nrow(dat)
k= dat[, .N , by= .(id, category, game, item)]
k
k= dat[, .N , by= .(id, category, game, item)]
k[N>2]
k= dat[, .N , by= .(id, category, game, item)]
k[N>1]
k= dat[, .N , by= .(id, category, game, item)]
to_merge= k[N>1]
to_merge= dat[, .N , by= .(id, category, game, item)]
merge(dat, to_merge)
dat= merge(dat, to_merge)
dat
dat= dat[N==1,]
dat
dat= subset(dat, select= -c(N))
pres =
[1062  219  779  148  668 1458  694 1637  475 1433  912 1416  785 1411  701  969;
1175  788  653 1031 1410  184 1134  993  152  313 1033 1591  652 1115 1184 1531;
329  605  414 1614  852  950 1105   10 1144  459  856  455 1178  277 1415 1118;
843 1173 1067   46 1435 1561 1202   30  270  493  815  102  233  796  500  753;
1044  372  556 1600  685 1598  409  989 1326  100  757   94 1491 1398   56 1261;
257 1454  315 1596 1400 1578  840 1069 1294 1254  572  758 1052  620 1230  380;
546  811  252 1093  147  241  589 1351 1373 1446 1621  310  920  188   22  339;
1179 1402 1468  581 1629  647  710  207 1313 1627  378  397  400  515 1579 1038;
1107  410  206 1413  441  930 1439  975  242  109 1257 1193  535 1471  122  132;
1427  555  949 1204  116  540  479  582 1386  888  258 1342 1198  574   87 1008];
pres = [1062 ,219 ,779 ,148 ,668 1458 ,694 1637 ,475 1433 ,912 1416 ,785 1411 ,701 ,969;
, 1175 ,788 ,653 1031 1410 ,184 1134 ,993 ,152 ,313 1033 1591 ,652 1115 1184 1531;
, 329 ,605 ,414 1614 ,852 ,950 1105 , 10 1144 ,459 ,856 ,455 1178 ,277 1415 1118;
, 843 1173 1067 , 46 1435 1561 1202 , 30 ,270 ,493 ,815 ,102 ,233 ,796 ,500 ,753;
, 1044 ,372 ,556 1600 ,685 1598 ,409 ,989 1326 ,100 ,757 , 94 1491 1398 , 56 1261;
, 257 1454 ,315 1596 1400 1578 ,840 1069 1294 1254 ,572 ,758 1052 ,620 1230 ,380;
, 546 ,811 ,252 1093 ,147 ,241 ,589 1351 1373 1446 1621 ,310 ,920 ,188 , 22 ,339;
, 1179 1402 1468 ,581 1629 ,647 ,710 ,207 1313 1627 ,378 ,397 ,400 ,515 1579 1038;
, 1107 ,410 ,206 1413 ,441 ,930 1439 ,975 ,242 ,109 1257 1193 ,535 1471 ,122 ,132;
, 1427 ,555 ,949 1204 ,116 ,540 ,479 ,582 1386 ,888 ,258 1342 1198 ,574 , 87 1008];
pres = [1062, 219, 779, 148, 668 1458, 694 1637, 475 1433, 912 1416, 785 1411, 701, 969;
,  1175, 788, 653 1031 1410, 184 1134, 993, 152, 313 1033 1591, 652 1115 1184 1531;
,  329, 605, 414 1614, 852, 950 1105,  10 1144, 459, 856, 455 1178, 277 1415 1118;
,  843 1173 1067,  46 1435 1561 1202,  30, 270, 493, 815, 102, 233, 796, 500, 753;
,  1044, 372, 556 1600, 685 1598, 409, 989 1326, 100, 757,  94 1491 1398,  56 1261;
,  257 1454, 315 1596 1400 1578, 840 1069 1294 1254, 572, 758 1052, 620 1230, 380;
,  546, 811, 252 1093, 147, 241, 589 1351 1373 1446 1621, 310, 920, 188,  22, 339;
,  1179 1402 1468, 581 1629, 647, 710, 207 1313 1627, 378, 397, 400, 515 1579 1038;
,  1107, 410, 206 1413, 441, 930 1439, 975, 242, 109 1257 1193, 535 1471, 122, 132;
,  1427, 555, 949 1204, 116, 540, 479, 582 1386, 888, 258 1342 1198, 574,  87 1008];
pres = [1062, 219, 779, 148, 668 1458, 694 1637, 475 1433, 912 1416, 785 1411, 701, 969,
,  1175, 788, 653 1031 1410, 184 1134, 993, 152, 313 1033 1591, 652 1115 1184 1531,
,  329, 605, 414 1614, 852, 950 1105,  10 1144, 459, 856, 455 1178, 277 1415 1118,
,  843 1173 1067,  46 1435 1561 1202,  30, 270, 493, 815, 102, 233, 796, 500, 753,
,  1044, 372, 556 1600, 685 1598, 409, 989 1326, 100, 757,  94 1491 1398,  56 1261,
,  257 1454, 315 1596 1400 1578, 840 1069 1294 1254, 572, 758 1052, 620 1230, 380,
,  546, 811, 252 1093, 147, 241, 589 1351 1373 1446 1621, 310, 920, 188,  22, 339,
,  1179 1402 1468, 581 1629, 647, 710, 207 1313 1627, 378, 397, 400, 515 1579 1038,
,  1107, 410, 206 1413, 441, 930 1439, 975, 242, 109 1257 1193, 535 1471, 122, 132,
,  1427, 555, 949 1204, 116, 540, 479, 582 1386, 888, 258 1342 1198, 574,  87 1008],
pres = [1062, 219, 779, 148, 668 1458, 694 1637, 475 1433, 912 1416, 785 1411, 701, 969,
,  1175, 788, 653 1031 1410, 184 1134, 993, 152, 313 1033 1591, 652 1115 1184 1531,
,  329, 605, 414 1614, 852, 950 1105,  10 1144, 459, 856, 455 1178, 277 1415 1118,
,  843 1173 1067,  46 1435 1561 1202,  30, 270, 493, 815, 102, 233, 796, 500, 753,
,  1044, 372, 556 1600, 685 1598, 409, 989 1326, 100, 757,  94 1491 1398,  56 1261,
,  257 1454, 315 1596 1400 1578, 840 1069 1294 1254, 572, 758 1052, 620 1230, 380,
,  546, 811, 252 1093, 147, 241, 589 1351 1373 1446 1621, 310, 920, 188,  22, 339,
,  1179 1402 1468, 581 1629, 647, 710, 207 1313 1627, 378, 397, 400, 515 1579 1038,
,  1107, 410, 206 1413, 441, 930 1439, 975, 242, 109 1257 1193, 535 1471, 122, 132,
,  1427, 555, 949 1204, 116, 540, 479, 582 1386, 888, 258 1342 1198, 574,  87 1008],
pres = [1062, 219, 779, 148, 668 1458, 694 1637, 475 1433, 912 1416, 785 1411, 701, 969,
, 1175, 788, 653 1031 1410, 184 1134, 993, 152, 313 1033 1591, 652 1115 1184 1531,
, 329, 605, 414 1614, 852, 950 1105, 10 1144, 459, 856, 455 1178, 277 1415 1118,
, 843 1173 1067, 46 1435 1561 1202, 30, 270, 493, 815, 102, 233, 796, 500, 753,
, 1044, 372, 556 1600, 685 1598, 409, 989 1326, 100, 757, 94 1491 1398, 56 1261,
, 257 1454, 315 1596 1400 1578, 840 1069 1294 1254, 572, 758 1052, 620 1230, 380,
, 546, 811, 252 1093, 147, 241, 589 1351 1373 1446 1621, 310, 920, 188, 22, 339,
, 1179 1402 1468, 581 1629, 647, 710, 207 1313 1627, 378, 397, 400, 515 1579 1038,
, 1107, 410, 206 1413, 441, 930 1439, 975, 242, 109 1257 1193, 535 1471, 122, 132,
, 1427, 555, 949 1204, 116, 540, 479, 582 1386, 888, 258 1342 1198, 574, 87 1008],
pres = [1062, 219, 779, 148, 668 1458, 694 1637, 475 1433, 912 1416, 785 1411, 701, 969,
, 1175, 788, 653 1031 1410, 184 1134, 993, 152, 313 1033 1591, 652 1115 1184 1531,
, 329, 605, 414 1614, 852, 950 1105, 10 1144, 459, 856, 455 1178, 277 1415 1118,
, 843 1173 1067, 46 1435 1561 1202, 30, 270, 493, 815, 102, 233, 796, 500, 753,
, 1044, 372, 556 1600, 685 1598, 409, 989 1326, 100, 757, 94 1491 1398, 56 1261,
, 257 1454, 315 1596 1400 1578, 840 1069 1294 1254, 572, 758 1052, 620 1230, 380,
, 546, 811, 252 1093, 147, 241, 589 1351 1373 1446 1621, 310, 920, 188, 22, 339,
, 1179 1402 1468, 581 1629, 647, 710, 207 1313 1627, 378, 397, 400, 515 1579 1038,
, 1107, 410, 206 1413, 441, 930 1439, 975, 242, 109 1257 1193, 535 1471, 122, 132,
, 1427, 555, 949 1204, 116, 540, 479, 582 1386, 888, 258 1342 1198, 574, 87 1008]
# ##Relevant Libraries & Packages###
# install.packages("data.table")
library(data.table)
# install.packages("googlesheets4")
library(googlesheets4)
