back_idx= vector()
# p_counts= data.table(possible= c(min(s_df$dist):max(s_df$dist)), counts= rep(0, length(min(s_df$dist):max(s_df$dist)))) #subject index
# possible_counts= data.table(possible= numeric(), counts= numeric()) #full set using rbindlist
all_transitions= data.table(possible= numeric())
for(subject in nsubj){
this_idx= s_df[id== subject]
for(cats in unique(s_df$category)){
# forward backwards possible transition vectors
get_transitions= data.table(possible= numeric())
for (i in 1:nrow(this_subj)){
back_idx[i]= this_subj[i]$sp1
btr= c(min(this_subj$sp1):this_subj[i]$sp1)
btr= btr[!btr %in% this_subj[i]$sp1 & !btr %in% back_idx]
#There's probably a cleaner way to do this- but doing it out fully to make sure that I have it right
if(this_subj[i]$dist== -25){break}
b1= btr- this_subj[i]$sp1
ftr= c(this_subj[i]$sp1: max(this_subj$sp1))
ftr= ftr[!ftr %in% this_subj[i]$sp1 & ! ftr %in% back_idx]
f1= ftr- this_subj[i]$sp1
# How many possible transitions?
newlist= list(c(b1, f1, rep(subject, i)))
get_transitions= rbindlist(list(get_transitions,newlist))
# idk if it goes here
all_transitions= rbindlist(list(all_transitions,get_transitions))
}
}
}
s_df[]i
back_idx= vector()
# p_counts= data.table(possible= c(min(s_df$dist):max(s_df$dist)), counts= rep(0, length(min(s_df$dist):max(s_df$dist)))) #subject index
# possible_counts= data.table(possible= numeric(), counts= numeric()) #full set using rbindlist
all_transitions= data.table(possible= numeric())
for(subject in nsubj){
this_idx= s_df[id== subject]
for(cats in unique(s_df$category)){
# forward backwards possible transition vectors
get_transitions= data.table(possible= numeric())
for (i in 1:nrow(this_subj)){
back_idx[i]= this_subj[i]$sp1
btr= c(min(this_subj$sp1):this_subj[i]$sp1)
btr= btr[!btr %in% this_subj[i]$sp1 & !btr %in% back_idx]
#There's probably a cleaner way to do this- but doing it out fully to make sure that I have it right
if(this_subj[i]$dist== -25){break}
b1= btr- this_subj[i]$sp1
ftr= c(this_subj[i]$sp1: max(this_subj$sp1))
ftr= ftr[!ftr %in% this_subj[i]$sp1 & ! ftr %in% back_idx]
f1= ftr- this_subj[i]$sp1
# How many possible transitions?
newlist= list(c(b1, f1))
get_transitions= rbindlist(list(get_transitions,newlist))
# idk if it goes here
all_transitions= rbindlist(list(all_transitions,get_transitions))
}
}
}
this_subj
back_idx= vector()
# p_counts= data.table(possible= c(min(s_df$dist):max(s_df$dist)), counts= rep(0, length(min(s_df$dist):max(s_df$dist)))) #subject index
# possible_counts= data.table(possible= numeric(), counts= numeric()) #full set using rbindlist
all_transitions= data.table(possible= numeric())
for(subject in nsubj){
this_idx= s_df[id== subject]
for(cats in unique(s_df$category)){
# forward backwards possible transition vectors
get_transitions= data.table(possible= numeric())
for (i in 1:nrow(this_subj)){
back_idx[i]= this_subj[i]$sp1
btr= c(min(this_subj$sp1):this_subj[i]$sp1)
btr= btr[!btr %in% this_subj[i]$sp1 & !btr %in% back_idx]
#There's probably a cleaner way to do this- but doing it out fully to make sure that I have it right
if(this_subj[i]$dist== -25){break}
b1= btr- this_subj[i]$sp1
ftr= c(this_subj[i]$sp1: max(this_subj$sp1))
ftr= ftr[!ftr %in% this_subj[i]$sp1 & ! ftr %in% back_idx]
f1= ftr- this_subj[i]$sp1
# How many possible transitions?
newlist= list(c(b1, f1))
get_transitions= rbindlist(list(get_transitions,newlist))
# idk if it goes here
all_transitions= rbindlist(list(all_transitions,get_transitions))
}
}
}
this_subj
back_idx= vector()
# p_counts= data.table(possible= c(min(s_df$dist):max(s_df$dist)), counts= rep(0, length(min(s_df$dist):max(s_df$dist)))) #subject index
# possible_counts= data.table(possible= numeric(), counts= numeric()) #full set using rbindlist
all_transitions= data.table(possible= numeric())
for(subject in nsubj){
this_idx= s_df[id== subject]
for(cats in unique(s_df$category)){
# forward backwards possible transition vectors
this_subj= this_idx[category== cats]
get_transitions= data.table(possible= numeric())
for (i in 1:nrow(this_subj)){
back_idx[i]= this_subj[i]$sp1
btr= c(min(this_subj$sp1):this_subj[i]$sp1)
btr= btr[!btr %in% this_subj[i]$sp1 & !btr %in% back_idx]
#There's probably a cleaner way to do this- but doing it out fully to make sure that I have it right
if(this_subj[i]$dist== -25){break}
b1= btr- this_subj[i]$sp1
ftr= c(this_subj[i]$sp1: max(this_subj$sp1))
ftr= ftr[!ftr %in% this_subj[i]$sp1 & ! ftr %in% back_idx]
f1= ftr- this_subj[i]$sp1
# How many possible transitions?
newlist= list(c(b1, f1))
get_transitions= rbindlist(list(get_transitions,newlist))
# idk if it goes here
all_transitions= rbindlist(list(all_transitions,get_transitions))
}
}
}
this_subj
back_idx= vector()
# p_counts= data.table(possible= c(min(s_df$dist):max(s_df$dist)), counts= rep(0, length(min(s_df$dist):max(s_df$dist)))) #subject index
# possible_counts= data.table(possible= numeric(), counts= numeric()) #full set using rbindlist
all_transitions= data.table(possible= numeric())
for(subject in nsubj){
this_idx= s_df[id== subject]
for(cats in unique(this_idx$category)){
# forward backwards possible transition vectors
this_subj= this_idx[category== cats]
get_transitions= data.table(possible= numeric())
for (i in 1:nrow(this_subj)){
back_idx[i]= this_subj[i]$sp1
btr= c(min(this_subj$sp1):this_subj[i]$sp1)
btr= btr[!btr %in% this_subj[i]$sp1 & !btr %in% back_idx]
#There's probably a cleaner way to do this- but doing it out fully to make sure that I have it right
if(this_subj[i]$dist== -25){break}
b1= btr- this_subj[i]$sp1
ftr= c(this_subj[i]$sp1: max(this_subj$sp1))
ftr= ftr[!ftr %in% this_subj[i]$sp1 & ! ftr %in% back_idx]
f1= ftr- this_subj[i]$sp1
# How many possible transitions?
newlist= list(c(b1, f1))
get_transitions= rbindlist(list(get_transitions,newlist))
# idk if it goes here
all_transitions= rbindlist(list(all_transitions,get_transitions))
}
}
}
all_transitions
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
p_vec= data.table(possible= numeric(), counts= numeric())
range_vec= c(min(s_df$dist):max(s_df$dist))
for (i in 1:length(range_vec)){
get_counts[i]= sum(all_transitions$possible %in% range_vec[i])
}
get_counts
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
p_vec= data.table(possible= numeric(), counts= numeric())
range_vec= c(min(s_df$dist):max(s_df$dist))
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= numeric())
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= numeric())
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
p_vec
# just get the table counts for each instance of value
j= p_vec[, .N, by= possible]
k= s_df[, .N, by= dist]
k= k[dist>= -13]
k= k[dist<= max(j$possible)]
colnames(k) <- c("dist", "N")
colnames(j) <- c("dist", "N")
# compare possible versus actual counts
comp_pcounts= merge(j,k, by= "dist")
colnames(comp_pcounts) <- c("dist", "possible", "actual")
comp_pcounts
j
# just get the table counts for each instance of value
j= p_vec[, .N, by= counts]
k= s_df[, .N, by= dist]
k= k[dist>= -13]
k= k[dist<= max(j$possible)]
colnames(k) <- c("dist", "N")
colnames(j) <- c("dist", "N")
# compare possible versus actual counts
comp_pcounts= merge(j,k, by= "dist")
colnames(comp_pcounts) <- c("dist", "possible", "actual")
# just get the table counts for each instance of value
j= p_vec[, .N, by= counts]
k= s_df[, .N, by= dist]
k= k[dist>= -13]
k= k[dist<= max(j$counts)]
colnames(k) <- c("dist", "N")
colnames(j) <- c("dist", "N")
# compare possible versus actual counts
comp_pcounts= merge(j,k, by= "dist")
colnames(comp_pcounts) <- c("dist", "possible", "actual")
comp_pcounts
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
j
p_vec
k
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
k= s_df[, .N, by= dist]
k
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
k= s_df[, .N, by= dist]
k[order(dist)]
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
k= s_df[, .N, by= dist]
k= k[order(dist)]
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
k= s_df[, .N, by= dist]
k= k[order(dist)]
colnames(k)= colnames(p_vec)
# just get the table counts for each instance of value
j= all_transitions[, .N, by= possible]
k= s_df[, .N, by= dist]
k= k[dist>= -13]
k= k[dist<= max(j$possible)]
colnames(k) <- c("dist", "N")
colnames(j) <- c("dist", "N")
# compare possible versus actual counts
comp_pcounts= merge(j,k, by= "dist")
colnames(comp_pcounts) <- c("dist", "possible", "actual")
# fuck it's because each subject has a different SP length- the kahana CRP tutorial assumes that SP range will be fixed- so range is is out of 1:length(N items presented)
get_counts= vector()
range_vec= c(min(s_df$dist):max(s_df$dist))
p_vec= data.table(possible= range_vec, counts= NaN)
for (i in 1:length(range_vec)){
p_vec[i]$counts= sum(all_transitions$possible %in% range_vec[i])
}
k= s_df[, .N, by= dist]
k= k[order(dist)]
colnames(k)= colnames(p_vec)
k
k[counts>p_vec$counts]
k[counts> p_vec$counts]
p_vec
k
merge(k, p_vec)
merge(k, p_vec, by= "possible")
all_counts= merge(k, p_vec, by= "possible")
all_counts
all_counts= merge(p_vec,k, by= "possible")
all_counts
all_counts= merge(p_vec,k, by= "possible")
colnames(all_counts) <- colnames(p_vec)
all_counts= merge(k, pvec, by= "possible")
colnames(all_counts) <- c("dist", "observed", "possible")
all_counts= merge(k, pvec, by= "possible")
colnames(all_counts) <- c("dist", "observed", "possible")
all_counts= merge(k, p_vec, by= "possible")
colnames(all_counts) <- c("dist", "observed", "possible")
all_counts
all_counts= merge(k, p_vec, by= "possible")
colnames(all_counts) <- c("lag", "observed", "possible")
all_counts[, CRP:= observed/possible]
all_counts
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line()
range_vec
all_counts
k
all_counts
k= all_counts
k
k= all_counts
range_vec
k= all_counts
range_vec
merge(all_counts, range_vec)
k= all_counts
range_vec
rbindlist(list(all_counts, range_vec))
k= all_counts
newlist= list(range_vec)
rbindlist(list(all_counts, list(range_vec)))
k= all_counts
newlist= list(range_vec)
cbindlist(list(all_counts, list(range_vec)))
k= all_counts
newlist= list(range_vec)
cbind(list(all_counts, list(range_vec)))
k= all_counts
newlist= list(range_vec)
cbind((all_counts, range_vec))
k= all_counts
newlist= list(range_vec)
cbind(all_counts, range_vec)
? cbind
k= all_counts
newlist= list(range_vec)
cbind(all_counts, range_vec, factor.exclude= TRUE)
k= all_counts
newlist= list(range_vec)
cbind(all_counts, range_vec, deparse.level = 1)
k= all_counts
# # just get the table counts for each instance of value
# j= all_transitions[, .N, by= possible]
# k= s_df[, .N, by= dist]
# k= k[dist>= -13]
# k= k[dist<= max(j$possible)]
# colnames(k) <- c("dist", "N")
# colnames(j) <- c("dist", "N")
# # compare possible versus actual counts
# comp_pcounts= merge(j,k, by= "dist")
# colnames(comp_pcounts) <- c("dist", "possible", "actual")
k
k[!(possible %in% range_vec)]
# # just get the table counts for each instance of value
# j= all_transitions[, .N, by= possible]
# k= s_df[, .N, by= dist]
# k= k[dist>= -13]
# k= k[dist<= max(j$possible)]
# colnames(k) <- c("dist", "N")
# colnames(j) <- c("dist", "N")
# # compare possible versus actual counts
# comp_pcounts= merge(j,k, by= "dist")
# colnames(comp_pcounts) <- c("dist", "possible", "actual")
k
k[!(possible %in% range_vec)]
range_vec
k[!(!possible %in% range_vec)]
k[(!possible %in% range_vec)]
k[!(lag %in% range_vec)]
k[!(range_vec %in% lag)]
? row
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(all_counts[i]$possible != range_vec[i]){
}
}
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(all_counts[i]$possible != range_vec[i]){
print(range_vec[i])
}
}
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(all_counts[i]$lag != range_vec[i]){
print(range_vec[i])
}
}
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(!(all_counts$lag %in% range_vec[i])){
print(range_vec[i])
}
}
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(!any(all_counts$lag %in% range_vec[i])){
print(range_vec[i])
}
}
k= all_counts
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(!any(all_counts$lag %in% range_vec[i])){
print(range_vec[i])
k[i]$lag= range_vec[i]
k[i]$possible= 0
k[i]$observed= 0
k[i]$crp= NaN
}
}
k= all_counts
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(!any(all_counts$lag %in% range_vec[i])){
print(range_vec[i])
k[i]$lag= range_vec[i]
k[i]$possible= 0
k[i]$observed= 0
k[i]$CRP= NaN
}
}
k
k= all_counts
for (i in 1:length(range_vec)){
idx= range_vec[i]
if(!any(all_counts$lag %in% range_vec[i])){
print(range_vec[i])
k[i]$lag= range_vec[i]
k[i]$possible= 0
k[i]$observed= 0
k[i]$CRP= NaN
}
}
all_counts= k
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line()
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line() + geom_point()
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line() + geom_point()+ xlim(-20,25)
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line() + geom_point()+ xlim(-20,25)+ labs(title= "Lag CRP", x= "Lag")
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line() + geom_point()+ xlim(-20,20)+ labs(title= "Lag CRP", x= "Lag")
ggplot(data= all_counts, aes(x= lag, y= CRP))+ geom_line() + geom_point()+ xlim(-20,20)+ labs(title= "Lag CRP", x= "Lag")
ggsave("lagcrp_summer22.png", device= png, dpi= 300)
warnings()
sum(all_counts[lag<0])
all_counts
# get forwards and backwards transitions
all_counts[, directionality:= lag>0]
all_counts
# get forwards and backwards transitions
all_counts[, directionality:= as.numeric(lag>0)]
all_counts
# get forwards and backwards transitions
all_counts[, directionality:= as.numeric(lag>0)]
sum(all_counts[directionality==0])
all_counts[directionality== 0]
# get forwards and backwards transitions
all_counts[, directionality:= as.numeric(lag>0)]
sum(all_counts[directionality==0]$directionality)
# get forwards and backwards transitions
all_counts[, directionality:= as.numeric(lag>0)]
sum(all_counts$directionality==0)
# get forwards and backwards transitions
all_counts[, directionality:= as.numeric(lag>0)]
sum(all_counts$directionality==0)
sum(all_counts$directionality==1)
all_counts
# get forwards and backwards transitions
all_counts[, directionality:= as.numeric(lag>0)]
sum(all_counts[directionality==0]$observed)
sum(all_counts[directionality==1]$observed)
2184- 1689
all_transitions
dat
back_idx= vector()
# p_counts= data.table(possible= c(min(s_df$dist):max(s_df$dist)), counts= rep(0, length(min(s_df$dist):max(s_df$dist)))) #subject index
# possible_counts= data.table(possible= numeric(), counts= numeric()) #full set using rbindlist
all_transitions= data.table(possible= numeric())
for(subject in nsubj){
this_idx= s_df[id== subject]
for(cats in unique(this_idx$category)){
# forward backwards possible transition vectors
this_subj= this_idx[category== cats]
get_transitions= data.table(possible= numeric())
for (i in 1:nrow(this_subj)){
back_idx[i]= this_subj[i]$sp1
btr= c(min(this_subj$sp1):this_subj[i]$sp1)
btr= btr[!btr %in% this_subj[i]$sp1 & !btr %in% back_idx]
#There's probably a cleaner way to do this- but doing it out fully to make sure that I have it right
if(this_subj[i]$dist== -25){break}
b1= btr- this_subj[i]$sp1
ftr= c(this_subj[i]$sp1: max(this_subj$sp1))
ftr= ftr[!ftr %in% this_subj[i]$sp1 & ! ftr %in% back_idx]
f1= ftr- this_subj[i]$sp1
# How many possible transitions?
newlist= list(c(b1, f1))
get_transitions= rbindlist(list(get_transitions,newlist))
# idk if it goes here
all_transitions= rbindlist(list(all_transitions,get_transitions))
}
}
}
all_transitions
s_df
s_df
? write.csv
write.csv(s_df, file= "contiguityfor_python.csv")
reticulate::repl_python()
word_embed= pd.read_csv('/Users/rebeccawilder/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/contiguityfor_python.csv')
Y
#### ALL TO BE LOADED INTO PYTHON ####
python3
reticulate::repl_python()
