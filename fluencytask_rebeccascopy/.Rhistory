trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:nrow(trial2)){
if (trial2$both_trials[i]==1){
old= old +1
} else {
new = new + 1
}
}
transition_probabilities[id== subject & category== cats]$old= old
transition_probabilities[id== subject & category== cats]$new= new
}
}
transition_probabilities
##### Prob Repeat-Repeat ####
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old <- 0
new <- 0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:nrow(trial2)){
if (trial2$both_trials[i]==1){
old= old +1
} else {
new = new + 1
}
}
transition_probabilities[id== subject & category== cats]$old= old
transition_probabilities[id== subject & category== cats]$new= new
}
}
tp$OldOld/(tp$OldOld+ tp$OldNew)
transition_probabilities$OldOld/(transition_probabilities$OldOld+ transition_probabilities$OldNew)
transition_probabilities$OldOld/(transition_probabilities$OldOld+ transition_probabilities$OldNew)
transition_probabilities
##### Prob Repeat-Repeat ####
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old <- 0
new <- 0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:nrow(trial2)){
if (trial2$both_trials[i]==1){
old= old +1
} else {
new = new + 1
}
}
transition_probabilities[id== subject & category== cats]$old= old
transition_probabilities[id== subject & category== cats]$new= new
}
}
##### Prob Repeat-Repeat ####
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in ncat){
old <- 0
new <- 0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:nrow(trial2)){
if (trial2$both_trials[i]==1){
old= old +1
} else {
new = new + 1
}
}
transition_probabilities[id== subject & category== cats]$old= old
transition_probabilities[id== subject & category== cats]$new= new
}
}
trial2
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
#
for (subject in nsubj){
for (cats in unique(dat$category)){
old <- 0
new <- 0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:nrow(trial2)){
if (trial2$both_trials[i]==1){
old= old +1
} else {
new = new + 1
}
}
transition_probabilities[id== subject & category== cats]$old= old
transition_probabilities[id== subject & category== cats]$new= new
}
}
tp<- transition_probabilities
for (subject in nsubj){
for (cats in ncat){
old <- 0
new <- 0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:nrow(trial2)){
if (trial2$both_trials[i]==1){
old= old +1
} else {
new = new + 1
}
}
transition_probabilities[id== subject & category== cats]$old= old
transition_probabilities[id== subject & category== cats]$new= new
}
}
transition_probabilities$OldOld/(transition_probabilities$OldOld+ transition_probabilities$OldNew)
##### Prob Repeat-Repeat ####
for (subject in nsubj){
for (cats in ncat) {
oldold= 0
oldnew= 0
newold= 0
newnew= 0
}
}
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:(nrow(trial2)-1)){
if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
old_old= old_old+1
} else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
new_old= new_old+1
} else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
old_new= old_new +1
} else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
new_new= new_new+1
}
}
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow, fill= TRUE)
}
}
# for (i in 1:(nrow(trial2)-1)){
#   if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
#     old_old= old_old+1
#   } else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
#     new_old= new_old+1
#   } else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
#     old_new= old_new +1
#   } else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
#     new_new= new_new+1
#   }
# }
trial2
nrow(trial2)-1
##### Prob Repeat-Repeat ####
for (subject in nsubj){
for (cats in ncat) {
oldold= 0
oldnew= 0
newold= 0
newnew= 0
}
}
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for(i in 1:(nrow(trial2)-1)){
print(c(i, i+1, nrow(trial2)))
}
# for (i in 1:(nrow(trial2)-1)){
#   if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
#     old_old= old_old+1
#   } else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
#     new_old= new_old+1
#   } else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
#     old_new= old_new +1
#   } else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
#     new_new= new_new+1
#   }
# }
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow, fill= TRUE)
}
}
##### Prob Repeat-Repeat ####
for (subject in nsubj){
for (cats in ncat) {
oldold= 0
oldnew= 0
newold= 0
newnew= 0
}
}
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for(i in 1:(nrow(trial2)-1)){
# print(c(i, i+1, nrow(trial2))) make sure no weird indexing issue
if(trial2[i,both_trials]==1){
old= old+1
}
}
# for (i in 1:(nrow(trial2)-1)){
#   if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
#     old_old= old_old+1
#   } else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
#     new_old= new_old+1
#   } else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
#     old_new= old_new +1
#   } else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
#     new_new= new_new+1
#   }
# }
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow, fill= TRUE)
}
}
old
##### Prob Repeat-Repeat ####
for (subject in nsubj){
for (cats in ncat) {
oldold= 0
oldnew= 0
newold= 0
newnew= 0
}
}
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for(i in 1:(nrow(trial2)-1)){
# print(c(i, i+1, nrow(trial2))) make sure no weird indexing issue
if(trial2[i,both_trials]==1){
old= old+1
new= new+0
} else{
new= new+1
old= old+0
}
}
# for (i in 1:(nrow(trial2)-1)){
#   if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
#     old_old= old_old+1
#   } else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
#     new_old= new_old+1
#   } else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
#     old_new= old_new +1
#   } else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
#     new_new= new_new+1
#   }
# }
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow, fill= TRUE)
}
}
old
new
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category))
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
dat
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
dat <- data.table(read.csv("final_results.csv"))
dat<- subset(dat,select=-c(X))
nsubj= unique(dat$id)
ncat= unique(dat$category)
# get indices for categories that were !repeated twice
k= dat[, .N, by= .(category, game, id)]
cat_table= k[, .N, by= .(id, category)]
cat_table= cat_table[N==2]
dat= merge(dat, cat_table)
dat= dat[N== 2]
# Drop games 23-24
ncat= unique(dat$category)
for (i in 1:length(nsubj)){
for (j in 1:length(ncat)){
this_game <- dat[id== nsubj[i] & category== ncat[j], game]
dat[id== nsubj[i] & category== ncat[j], listnum:= max(game)]
}
}
dat[listnum== "FALSE", listrank:= 1]
dat[listnum == "TRUE", listrank:= 2]
dat[, both_trials := 0]
dat<- subset(dat, select=-c(listnum))
# get items that were listed in both trials
for (i in 1:length(nsubj)){
for (cats in ncat){
this_subj <- dat[id==nsubj[i] & category== cats,]
repeated_words <- intersect(this_subj[listrank==2,item], this_subj[listrank==1,item])
this_subj[, both_trials:= 0]
this_subj[item %in% repeated_words, both_trials:=1]
dat[id==nsubj[i] & category== cats]$both_trials <- this_subj$both_trials
}
}
dat[, temp_int:= 0]
dat[, temp_int:= ((max(game)-min(game))-1), by= .(id, category)]
# Spotcheck
dat[id== "Sy2yTzrhP6e" & category== "Vegetables"]
mod= glmer(data= dat, both_trials~ temp_int + (1|id)+ (1|category), family= "binomial")
typicality= vector()
pba= vector()
all_cats= data.table(item= character(), category= character(), typicality= numeric(), pba= numeric())
dat[, typicality:= NaN]
dat[, pba:= NaN]
### Rep v typicality ###
for (cats in ncat){
this_cat= dat[category== cats]
words= unique(this_cat[listrank== 2, item])
for ( i in 1:length(words)){
check_foroverlap <- intersect(this_cat[listrank==1 & item == words[i]]$id, this_cat[listrank==2 & item == words[i]]$id)
typicality[i]= (sum(this_cat[listrank==2 & item == words[i], .N, by= id]$N)-1)/length(nsubj)
if (length(check_foroverlap)>0){
pba[i] = length(check_foroverlap)/sum(this_cat[listrank== 1 & item == words[i], .N, by = id]$N)
dat[category== cats & item== words[i]]$typicality= typicality[i]
dat[category== cats & item== words[i]]$pba= pba[i]
} else{
pba[i]= 0
}
}
# newlist= list(words, pba, typicality, rep(cats,length(typicality)))
# all_cats= rbind(all_cats, list(rep(words[i], length(typicality)), rep(cats, length(typicality)), typicality, pba))
}
# merge(dat, all_cats, by.x= all_cats$item, by.y= all_cats$category)
ggplot() + geom_count(data= dat, aes(x= typicality, y= pba, alpha= 0.5)) + geom_abline(intercept= 0, slope= 1)+ ylim(0,1) + xlim(0,1)
mod= glmer(data= dat, both_trials~ temp_int + typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod)
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
##### Prob Repeat-Repeat ####
for (subject in nsubj){
for (cats in ncat) {
oldold= 0
oldnew= 0
newold= 0
newnew= 0
}
}
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for(i in 1:(nrow(trial2)-1)){
# print(c(i, i+1, nrow(trial2))) make sure no weird indexing issue
if(trial2[i,both_trials]==1){
old= old+1
new= new+0
} else{
new= new+1
old= old+0
}
}
# for (i in 1:(nrow(trial2)-1)){
#   if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
#     old_old= old_old+1
#   } else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
#     new_old= new_old+1
#   } else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
#     old_new= old_new +1
#   } else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
#     new_new= new_new+1
#   }
# }
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow, fill= TRUE)
}
}
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod2)
### Rep V Typicality without temporal interval
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod2)
### Rep V Typicality without temporal interval
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod2)
corr(typicality, pba)
### Rep V Typicality without temporal interval
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod2)
corr.test(data= dat, typicality, pba)
? corr.test
??corr.test
cor.test
### Rep V Typicality without temporal interval
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod2)
cor.test(data= dat, typicality, pba)
### Rep V Typicality without temporal interval
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial")
summary(mod2)
cor.test(data= dat, typicality, pba)
fit(mod2)
fited(mod2)
fitted(mod2)
ggplot() + geom_jitter(fitted(mod2))
ggplot() + geom_jitter(aes(x= both_trials,y= fitted(mod2)))
length(fitted(mod2))
length(dagt)
length(dat)
length(dat4id)
length(dat$id)
dat[, fvals:= fitted(mod2)]
dat[, fvals:= fitted(mod2), by= .(id, category)]
fvals= fitted(mod2)
ggplot() + geom_jitter(aes(x= both_trials,y= fitted(mod2)))
fvals= fitted(mod2)
mod2
dt= data.table()
dt[, outcomes= both_trials]
dt= data.table()
dt[, both_trials= dat$both_trials]
dt= data.table()
dt[, both_trials:= dat$both_trials]
mod2$fitted.values
mod2$fitted.vals
### Rep V Typicality without temporal interval
mod2= glmer(data= dat, both_trials ~ typicality + pba + (1|id)+ (1|category), family= "binomial", fit=mod$fitted.values)
summary(mod2)
mod2$fit
fit
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
Produc <- base::merge(Produc, fit_values, by=c("id", "category"), all.x=TRUE)
# Produc <- dplyr::left_join(Produc, fit_values, by=c("firm", "date"))
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
Produc<- base::merge(dat, fit_values, by=c("id", "category"), all.x=TRUE)
# Produc <- dplyr::left_join(Produc, fit_values, by=c("firm", "date"))
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
Produc<- base::merge(dat, fit_values, by=c("id", "category"), all.x=TRUE)
# Produc <- dplyr::left_join(Produc, fit_values, by=c("firm", "date"))
fitted_values_df
1107+11623
nrow
nrow(dat)
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
Produc<- base::merge(dat, fitted_values, by=c("id", "category"), all.x=TRUE)
Produc <- dplyr::left_join(Produc, fit_values, by=c("firm", "date"))
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
Produc<- base::merge(dat, fitted_values_df, by=c("id", "category"), all.x=TRUE)
Produc <- dplyr::left_join(Produc, fit_values, by=c("firm", "date"))
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
Produc<- base::merge(dat, fitted_values_df, by=c("id", "category"), all.x=TRUE)
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
fitted_values_df<- base::merge(dat, fitted_values_df, by=c("id", "category"), all.x=TRUE)
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
fitted_values_df<- base::merge(dat, fitted_values_df, by.x=c("id", "category"), all.x=TRUE)
fitted_values_vec <- fitted(mod2)
fitted_values_df <- cbind(attr(mod2, "index"),
fitted_values = fitted_values_vec)
fitted_values_df<- base::merge(dat, fitted_values_df, by.x= id, by.y= category, all.x=TRUE)
fitted_values_df
# ASSIGN RANDOM NAs ACROSS NON-PANEL COLUMNS
set.seed(41120)
for(col in names(Produc)[!names(Produc) %in% c("state", "year")]) {
Produc[sample(nrow(Produc), 50), col] <- NA
}
results <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,
data = Produc, index = c("state","year"))
fitted_values_vec <- fitted(results)
str(fitted_values_vec)
# 'pseries' Named num [1:588] -0.2459 -0.2274 -0.0927 -0.0981 -0.0184 ...
# - attr(*, "names")= chr [1:588] "ALABAMA" "ALABAMA" "ALABAMA" "ALABAMA" ...
# - attr(*, "index")=Classes ‘pindex’ and 'data.frame': 588 obs. of  2 variables:
#   ..$ state: Factor w/ 48 levels "ALABAMA","ARIZONA",..: 1 1 1 1 1 1 1 1 1 1 ...
#   ..$ year : Factor w/ 17 levels "1970","1971",..: 1 2 5 6 7 8 9 10 12 13 ...
fitted_values_df <- cbind(attr(fitted_values_vec, "index"),
fitted_values = fitted_values_vec)
Produc <- merge(Produc, fitted_values_df, by= c("state","year"), all.x=TRUE)
# fvals= fitted(mod2)
