# if you need to clear this var
# transition_probabilites <- data.table()
transition_probabilities <- data.table(id=character(), category=character(), pOldOld=numeric(), pOldNew=numeric(), pNewNew=numeric(), pNewOld=numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:(nrow(trial2)-1)){
if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
old_old= old_old+1
} else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
new_old= new_old+1
} else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
old_new= old_new +1
} else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
new_new= new_new+1
}
}
newrow <- list(id=subject, category=cats, old_old, old_new, new_new, new_old)
transition_probabilites <- rbind(transition_probabilities, newrow)
}
}
# newrow <- list(id="A101", category="fruits", pOldOld=.123, pOldNew=.5, pNewNew=.76, pNewOld=.3)
#
# transition_probabilites <- rbind(transition_probabilities, newrow)
# pOldOld=old_old/(old_new+old_old), pOldNew=old_new/(old_new+old_old), pNewOld= new_old/(new_old + new_new), pNewNew/
# pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
#       pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
# a <- data.table(rep(0,100),rep(0,100), rep(0,100), rep(0,100))
#
#
# for (i in 100){
#   a[i,] <- rbind(c(sample(100,4,1)))
# }
transition_probabilites
subject
nsubj
unique(dat$category)
newrow
transition_probabilities
5/0
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
# library(data.table)
# install.packages("googlesheets4")
# library(googlesheets4)
# install.packages("ggplot2")
# library(ggplot2)
dat <- data.table(read.csv("snafu_sample.csv"))
dat<- dat[group== "Experiment1"]
dat[listnum<3, listrank:= 1]
dat[listnum>=3 & listnum <6, listrank := 2]
dat[listnum>=6, listrank := 3]
dat<- dat[listrank<3,]
nsubj <- unique(dat$id)
trial2 <- dat[listrank==2]
# Set up everything for function
dat[, both_trials := 0]
set_reptrials <- function(i) {
this_subj <- dat[id==nsubj[i],]
repeated_words <- intersect(this_subj[listrank==2,item], this_subj[listrank==1,item])
this_subj[, both_trials:= 0]
this_subj[item %in% repeated_words, both_trials:=1]
dat[id==nsubj[i]]$both_trials <- this_subj$both_trials
}
#Now all trials have both trials
set_reptrials(length(nsubj))
for (subject in nsubj){
for (cats in unique(dat$category)){
this_subj <- dat[id== subject & category== cats,]
repeated_words <- intersect(this_subj[listrank==1,item], this_subj[listrank==2,item])
this_subj[item %in% repeated_words, both_trials:= 1]
this_subj[!item %in% repeated_words, both_trials:=0]
dat[id== subject & category== cats, both_trials:= this_subj$both_trials]
}
}
# if you need to clear this var
# transition_probabilites <- data.table()
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:(nrow(trial2)-1)){
if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
old_old= old_old+1
} else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
new_old= new_old+1
} else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
old_new= old_new +1
} else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
new_new= new_new+1
}
}
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilites <- rbind(transition_probabilities, newrow)
}
}
# newrow <- list(id="A101", category="fruits", pOldOld=.123, pOldNew=.5, pNewNew=.76, pNewOld=.3)
#
# transition_probabilites <- rbind(transition_probabilities, newrow)
# pOldOld=old_old/(old_new+old_old), pOldNew=old_new/(old_new+old_old), pNewOld= new_old/(new_old + new_new), pNewNew/
# pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
#       pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
# a <- data.table(rep(0,100),rep(0,100), rep(0,100), rep(0,100))
#
#
# for (i in 100){
#   a[i,] <- rbind(c(sample(100,4,1)))
# }
transition_probabilities
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
# library(data.table)
# install.packages("googlesheets4")
# library(googlesheets4)
# install.packages("ggplot2")
# library(ggplot2)
dat <- data.table(read.csv("snafu_sample.csv"))
dat<- dat[group== "Experiment1"]
dat[listnum<3, listrank:= 1]
dat[listnum>=3 & listnum <6, listrank := 2]
dat[listnum>=6, listrank := 3]
dat<- dat[listrank<3,]
nsubj <- unique(dat$id)
trial2 <- dat[listrank==2]
# Set up everything for function
dat[, both_trials := 0]
set_reptrials <- function(i) {
this_subj <- dat[id==nsubj[i],]
repeated_words <- intersect(this_subj[listrank==2,item], this_subj[listrank==1,item])
this_subj[, both_trials:= 0]
this_subj[item %in% repeated_words, both_trials:=1]
dat[id==nsubj[i]]$both_trials <- this_subj$both_trials
}
#Now all trials have both trials
set_reptrials(length(nsubj))
for (subject in nsubj){
for (cats in unique(dat$category)){
this_subj <- dat[id== subject & category== cats,]
repeated_words <- intersect(this_subj[listrank==1,item], this_subj[listrank==2,item])
this_subj[item %in% repeated_words, both_trials:= 1]
this_subj[!item %in% repeated_words, both_trials:=0]
dat[id== subject & category== cats, both_trials:= this_subj$both_trials]
}
}
# if you need to clear this var
# transition_probabilites <- data.table()
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:(nrow(trial2)-1)){
if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
old_old= old_old+1
} else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
new_old= new_old+1
} else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
old_new= old_new +1
} else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
new_new= new_new+1
}
}
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow)
}
}
# newrow <- list(id="A101", category="fruits", pOldOld=.123, pOldNew=.5, pNewNew=.76, pNewOld=.3)
#
# transition_probabilites <- rbind(transition_probabilities, newrow)
# pOldOld=old_old/(old_new+old_old), pOldNew=old_new/(old_new+old_old), pNewOld= new_old/(new_old + new_new), pNewNew/
# pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
#       pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
# a <- data.table(rep(0,100),rep(0,100), rep(0,100), rep(0,100))
#
#
# for (i in 100){
#   a[i,] <- rbind(c(sample(100,4,1)))
# }
transition_probabilities
sum(transition_probabilities[60,1], transition_probabilities[60,2])/sum(transition_probabilities[60,])
sum(transition_probabilities[60,3], transition_probabilities[60,4])/sum(transition_probabilities[60,3:6])
dat
dat[,.N,by=both_trials]
dat[listrank==2,.N,by=.(id,category,both_trials)]
31/(31+12)
22/(22+8)
91-4
87/2
43*2
90/2
45*2
(40-6)/40
85+7
92+2.5
44/40
34/40
38/2
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
# library(data.table)
# install.packages("googlesheets4")
# library(googlesheets4)
# install.packages("ggplot2")
# library(ggplot2)
## Pull data back to original dataframe ##
ra_sheet<- data.table(read_sheet('https://docs.google.com/spreadsheets/d/14YJ7IpvEyFVRSqr3zo3SAqgyR6g0QYAbI5xzxh3rl_A/edit?usp=sharing'))
dat <- data.table(read.csv("results_cleaned.csv"))
if(sum(colnames(dat)%in% "X")>0 | sum(colnames(dat%in% "X.1"))>0){
dat<- subset(dat,select=-c(X,X.1))
}
nitem <- unique(dat[,item])
cat_names <- unique(dat$category)
#Set up data with listrank
for (i in 1:length(nsubj)){
for (j in 1:length(cat_names)){
this_game <- dat[id== nsubj[i] & category== cat_names[j], game]
dat[id== nsubj[i] & category== cat_names[j], listnum:= this_game== max(this_game)]
}
}
dat[listnum== "FALSE", listrank:= 1]
dat[listnum == "TRUE", listrank:= 2]
dat<- subset(dat,select=-c(listnum))
trial1 <- dat[listrank== 1,]
trial2 <- dat[listrank== 2,]
p_trial <- vector()
# Find all of the listrank 3 which represent repeated items
# Do this in one subject first
intersect(dat[listrank==1 & item== nitems[i]]$id, dat[listrank==2 & item== nitems[i]]$id)
this_subject <- dat[id== nsubj[1] & category== "Fruits",]
# second_trial <- this_subj[listrank== 2]
# listrank type 3 is going to need to be specified to subject and category.  You can manually generalize... but idk how to streamline this in R but in matlab you would use a cell array. Ask Jeff tomorrow.
# find overlap between
this_subject[item%in% intersect(this_subject[listrank==2,item], this_subject[listrank==1, item]),]
this_subject[listrank==2, rep_before:= item %in% intersect(this_subject[listrank==2]$item, this_subject[listrank==1]$item)]
trial2 <- this_subject[listrank==2,]
# Change rep_before to FALSE
# Get all of the repeat repeat trials
old_old= 0
for (i in 1:(length(trial2$item)-1)){
if(sum(trial2[i]$rep_before== "TRUE",trial2[i+1]$rep_before== "TRUE")>1){
old_old= old_old+1
}else{
old_old=old_old+0
}
}
# if new|old --> only should include things following old
# Get all of the new new trials
# p ( new | old) = old_new / (old_new + old_old)
# p (old | old ) = old_old/ (old_new + old_old)
# p (old | new ) = new_old/ (new_old + new_new)
new_new= 0
for (i in 1:(length(trial2$item)-1)){
if(sum(trial2[i]$rep_before== "FALSE",trial2[i+1]$rep_before== "FALSE")>1){
new_new= new_new+1
}else{
new_new=new_new+0
}
}
# Get all of the new old trials
# 2= only said on the second trial
# 3= said on the second and the first trial
new_old= 0
for (i in 1:(length(trial2$item)-1)){
if(sum(trial2[i]$rep_before== "FALSE",trial2[i+1]$rep_before== "TRUE")>1){
new_old= new_old+1
}else{
new_old=new_old+0
}
}
old_new= 0
for (i in 1:(length(trial2$item)-1)){
if(sum(trial2[i]$rep_before== "TRUE",trial2[i+1]$rep_before== "FALSE")>1){
old_new= old_new+1
}else{
old_new=old_new+0
}
}
# Randomly sample iterations that can be indexed by list rank.
# set.seed(1)
(rand_trial <- sample(trial2$rep_before))
# Repeat previous loops with resampled trials
# just write a function
rold_old= 0
for (i in 1:(length(rand_trial)-1)){
if(sum(rand_trial[i]=="TRUE",rand_trial[i+1]=="TRUE")>1){
rold_old= rold_old+1
}else{
rold_old=rold_old+0
}
}
rnew_new=0
for (i in 1:(length(rand_trial)-1)){
if(sum(rand_trial[i]=="FALSE",rand_trial[i+1]=="FALSE")>1){
rnew_new= rnew_new+1
}else{
rnew_new=rnew_new+0
}
}
rold_new= 0
for (i in 1:(length(rand_trial)-1)){
if(sum(rand_trial[i]=="TRUE",rand_trial[i+1]=="FALSE")>1){
rold_new= rold_new+1
}else{
rold_new=rold_new+0
}
}
rnew_old= 0
for (i in 1:(length(rand_trial)-1)){
if(sum(rand_trial[i]=="FALSE",rand_trial[i+1]=="TRUE")>1){
rnew_old= rnew_old+1
}else{
rnew_old=rnew_old+0
}
}
# p ( new | old) = old_new / (old_new + old_old)
# p (old | old ) = old_old/ (old_new + old_old)
# p (old | new ) = new_old/ (new_old + new_new)
# t.test(old_old/(old_new+old_old),rold_old/(rold_new+rold_old))
# when scaling up be careful to do it one list at a time --> collapse
# permutations create distribution
sum(rold_old/length(this_subject$id),rnew_old/length(this_subject$id),rold_new/length(this_subject$id),rnew_new/length(this_subject$id))
# get distributions (Null Hypothesis)
counter1 <- vector()
for (i in 1:1000){
rand_trial <- sample(trial2)
#old_old_dist[i] <- pf(old|old)
# new_old_dist [i] <- pf(old|new)
# new_new_dist [i] <- pf(new|new)
# old_new_dist [i] <- pf(new|old)
}
# sample e.g. 1000 per trial (which means subj/cat/trial) and add col that says samplei for each iteration ?  Turn it into a function and pass it through
for (i in 1:1000){
}
# Look at resample dist and probability of old-old in Null resampled dist
#Box plot graph: two bars for each combinations --> bar would be mean, confidence intervals for range of vals
# For plotting, one data point that collapses across everything.  You cana also do it within subject, where you just collapse across category.
# dat[item %in% intersect(dat[listrank==2,item], dat[listrank==1, item])]$listrank <- 3
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
# library(data.table)
# install.packages("googlesheets4")
# library(googlesheets4)
# install.packages("ggplot2")
# library(ggplot2)
dat <- data.table(read.csv("snafu_sample.csv"))
dat<- dat[group== "Experiment1"]
dat[listnum<3, listrank:= 1]
dat[listnum>=3 & listnum <6, listrank := 2]
dat[listnum>=6, listrank := 3]
dat<- dat[listrank<3,]
nsubj <- unique(dat$id)
trial2 <- dat[listrank==2]
# Set up everything for function
dat[, both_trials := 0]
set_reptrials <- function(i) {
this_subj <- dat[id==nsubj[i],]
repeated_words <- intersect(this_subj[listrank==2,item], this_subj[listrank==1,item])
this_subj[, both_trials:= 0]
this_subj[item %in% repeated_words, both_trials:=1]
dat[id==nsubj[i]]$both_trials <- this_subj$both_trials
}
#Now all trials have both trials
set_reptrials(length(nsubj))
for (subject in nsubj){
for (cats in unique(dat$category)){
this_subj <- dat[id== subject & category== cats,]
repeated_words <- intersect(this_subj[listrank==1,item], this_subj[listrank==2,item])
this_subj[item %in% repeated_words, both_trials:= 1]
this_subj[!item %in% repeated_words, both_trials:=0]
dat[id== subject & category== cats, both_trials:= this_subj$both_trials]
}
}
# if you need to clear this var
# transition_probabilites <- data.table()
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:(nrow(trial2)-1)){
if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
old_old= old_old+1
} else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
new_old= new_old+1
} else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
old_new= old_new +1
} else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
new_new= new_new+1
}
}
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow)
}
}
# newrow <- list(id="A101", category="fruits", pOldOld=.123, pOldNew=.5, pNewNew=.76, pNewOld=.3)
#
# transition_probabilites <- rbind(transition_probabilities, newrow)
# pOldOld=old_old/(old_new+old_old), pOldNew=old_new/(old_new+old_old), pNewOld= new_old/(new_old + new_new), pNewNew/
# pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
#       pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
# a <- data.table(rep(0,100),rep(0,100), rep(0,100), rep(0,100))
#
#
# for (i in 100){
#   a[i,] <- rbind(c(sample(100,4,1)))
# }
if (getwd()!= "~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/logs"){
setwd("~/Desktop/Desktop - Rebecca’s MacBook Air/Research 2021-2022/GitHub/Wilder-Research-ZemlaLab/fluencytask_rebeccascopy/")
}
# ##Relevant Libraries & Packages###
# install.packages("data.table")
# library(data.table)
# install.packages("googlesheets4")
# library(googlesheets4)
# install.packages("ggplot2")
# library(ggplot2)
dat <- data.table(read.csv("snafu_sample.csv"))
dat<- dat[group== "Experiment1"]
dat[listnum<3, listrank:= 1]
dat[listnum>=3 & listnum <6, listrank := 2]
dat[listnum>=6, listrank := 3]
dat<- dat[listrank<3,]
nsubj <- unique(dat$id)
trial2 <- dat[listrank==2]
# Set up everything for function
dat[, both_trials := 0]
set_reptrials <- function(i) {
this_subj <- dat[id==nsubj[i],]
repeated_words <- intersect(this_subj[listrank==2,item], this_subj[listrank==1,item])
this_subj[, both_trials:= 0]
this_subj[item %in% repeated_words, both_trials:=1]
dat[id==nsubj[i]]$both_trials <- this_subj$both_trials
}
#Now all trials have both trials
set_reptrials(length(nsubj))
for (subject in nsubj){
for (cats in unique(dat$category)){
this_subj <- dat[id== subject & category== cats,]
repeated_words <- intersect(this_subj[listrank==1,item], this_subj[listrank==2,item])
this_subj[item %in% repeated_words, both_trials:= 1]
this_subj[!item %in% repeated_words, both_trials:=0]
dat[id== subject & category== cats, both_trials:= this_subj$both_trials]
}
}
# if you need to clear this var
# transition_probabilites <- data.table()
transition_probabilities <- data.table(id=character(), category=character(), OldOld=numeric(), OldNew=numeric(), NewNew=numeric(), NewOld=numeric(), old= numeric(), new= numeric())
for (subject in nsubj){
for (cats in unique(dat$category)){
old_old <-0
old_new <- 0
new_old <-0
new_new <-0
old <- 0
new <-0
trial2 <- dat[id== subject & category== cats & listrank==2,]
for (i in 1:(nrow(trial2)-1)){
if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 1){
old_old= old_old+1
} else if (trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 1){
new_old= new_old+1
} else if(trial2[i]$both_trials== 1 & trial2[i+1]$both_trials== 0){
old_new= old_new +1
} else if(trial2[i]$both_trials== 0 & trial2[i+1]$both_trials== 0){
new_new= new_new+1
}
}
newrow <- list(id=subject, category=cats, OldOld=old_old, OldNew=old_new, NewNew=new_new, NewOld=new_old)
transition_probabilities <- rbind(transition_probabilities, newrow)
}
}
# newrow <- list(id="A101", category="fruits", pOldOld=.123, pOldNew=.5, pNewNew=.76, pNewOld=.3)
#
# transition_probabilites <- rbind(transition_probabilities, newrow)
# pOldOld=old_old/(old_new+old_old), pOldNew=old_new/(old_new+old_old), pNewOld= new_old/(new_old + new_new), pNewNew/
# pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
#       pNewNew= new_new/(new_old+new_new), pNewOld= new_old/(new_old+new_new))
# a <- data.table(rep(0,100),rep(0,100), rep(0,100), rep(0,100))
#
#
# for (i in 100){
#   a[i,] <- rbind(c(sample(100,4,1)))
# }
dat
